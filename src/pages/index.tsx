import { useEffect, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import axios from "axios";
import useSWR from "swr";

import { useTheme } from "next-themes";
import { Button, Pane, ProgressCircle, toast } from "@moai/core";
import { MdDarkMode, MdOutlineLightMode } from "react-icons/md";
import { GoTerminal } from "react-icons/go";
import { RiClipboardLine } from "react-icons/ri";
import FolderDetails from "../components/folder-details";
import {
  ClipboardItemType,
  CreateNewItemType,
  Folder,
  PathAddress,
} from "../components/folder-details/interface";
import Terminal from "../components/terminal";
import { API_URL_FILE_STORAGE } from "../constants/endpoint";

const Home: NextPage = () => {
  const { theme, setTheme } = useTheme();

  const [isShowTerminal, setIsShowTerminal] = useState<boolean>(false);

  const [currentParent, setCurrentParent] = useState<{
    parentId: string;
    parentName: string;
  }>({ parentId: "", parentName: "" });

  const [currentPath, setCurrentPath] = useState<PathAddress[]>([]);

  const [isOpenClipboard, setIsOpenClipboard] = useState<boolean>(false);

  const [clipBoardItem, setClipboardItem] = useState<ClipboardItemType>({
    id: "",
    name: "",
    parentId: "",
  });

  useEffect(() => {
    fetch(`${API_URL_FILE_STORAGE}/?is_root=true`).then(async (res) => {
      const result = await res.json();
      const parentId = result[0].id || "";
      setCurrentPath([{ id: parentId, name: result[0].name }]);
      setCurrentParent({ parentId: parentId, parentName: result[0].name });
    });
  }, []);

  const fetcher = (url: string) => fetch(url).then((res) => res.json());

  const {
    data: folderData,
    isValidating,
    mutate,
  } = useSWR<Folder[]>(
    `${API_URL_FILE_STORAGE}/?parent_id=${currentParent.parentId}`,
    fetcher
  ); //this useSWR support real-time fetching

  useEffect(() => {
    if (currentParent.parentId) {
      mutate();
      const existPathIndex = currentPath.findIndex(
        (item) =>
          item.id === currentParent.parentId &&
          item.name === currentParent.parentName
      );

      if (existPathIndex === -1) {
        setCurrentPath([
          ...currentPath,
          { id: currentParent.parentId, name: currentParent.parentName },
        ]);
      } else {
        setCurrentPath(currentPath.slice(0, existPathIndex + 1));
      }
    }
  }, [currentParent]);

  const handleCreateNewItem = (
    itemType: CreateNewItemType,
    itemName: string,
    dataItem: string
  ) => {
    const folderBody = {
      name: itemName,
      type: itemType,
      data: dataItem,
      parent_id: currentParent.parentId,
      created_at: new Date(),
    };
    axios.post(API_URL_FILE_STORAGE, folderBody).then((res) => {
      if (res.data.statusCode === 200) {
        mutate();
        toast(toast.types.success, `Create a new ${itemType} successfully`);
      } else {
        toast(toast.types.failure, `Fail to create a new ${itemType}`);
      }
    });
  };

  return (
    <div className="h-screen p-2 bg-purple dark:bg-gray-700">
      <Head>
        <title>Virtual file system v3</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex space-x-2">
        <div className="cursor-pointer">
          <Button
            icon={GoTerminal}
            onClick={() => setIsShowTerminal(!isShowTerminal)}
          >
            Terminal
          </Button>
        </div>
        <div className="cursor-pointer">
          <Button
            icon={theme === "dark" ? MdOutlineLightMode : MdDarkMode}
            onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
            // eslint-disable-next-line react/no-children-prop
            children=""
          />
        </div>
      </div>
      <div className="float-right cursor-pointer">
        <Button
          icon={RiClipboardLine}
          onClick={() => setIsOpenClipboard(!isOpenClipboard)}
        >
          Clipboard
        </Button>
        {isOpenClipboard && (
          <div className="pt-2" style={{ maxWidth: "200px" }}>
            <Pane>
              {clipBoardItem.id ? (
                <div>
                  {clipBoardItem.type} &quot;{clipBoardItem.name}&quot; in
                  clipboard
                </div>
              ) : (
                "Clipboard is empty"
              )}
            </Pane>
          </div>
        )}
      </div>

      <div className="flex p-2">
        {currentPath.length
          ? currentPath.map((item, index) => {
              return (
                <div
                  className="text-blue-500 cursor-pointer"
                  key={index}
                  onClick={() => {
                    setCurrentParent({
                      parentId: item.id,
                      parentName: item.name,
                    });
                  }}
                >
                  /{item.name}
                </div>
              );
            })
          : "/home"}
      </div>

      <FolderDetails
        folderDetailData={folderData || []}
        setCreateNewItem={handleCreateNewItem}
        parent={currentParent}
        setParent={(parentId, parentName) => {
          setCurrentParent({ parentId: parentId, parentName: parentName });
        }}
        moveItem={clipBoardItem}
        setMoveItem={setClipboardItem}
        setTriggerReload={mutate}
      />
      {isValidating && (
        <div className="absolute top-0 bottom-0 left-0 right-0 z-10 flex items-center justify-center">
          <ProgressCircle size={32} value="indeterminate" />
        </div>
      )}

      {isShowTerminal && (
        <Terminal
          rootFolder={{ id: currentPath[0].id, name: currentPath[0].name }}
        />
      )}
    </div>
  );
};

export default Home;
